Configure git (only once per machine/O.S. install/environment setup)
   git config --global user.name "ArrowComputingTech"
   git config --global user.email "github@arrowcomputing.tech"

Get project from Github
   Go to project repo.
   // Click 'Clone or download' & copy link.
   git clone paste_link

Create new branch
   git branch new_branch_name
   // Then, switch to branch:
   git checkout new_branch_name
   // OR use -b option to auto-switch, combining the two commands above:
   git branch -b new_branch_name

Check what branch you're currently in
   git status

Push a change to Github
   git add .
   git commit -m 'Commit message'
   // Push to master:
   git push -u origin master
   // Or, if pushing to a branch:
   git push -u origin branch_name

Make a small change before you push to remote
	git add {modified_files} // or .
	git commit --amend --no-edit

Change commit message
	git commit --amend

Merge a branch into master
   *do some work on a branch
   git checkout master
   git merge your_branch_name

Fixing merge conflicts
	// Receive message about merge conflict
	// Open file/files that is/are conflicting
	// Fix file/files. Check which file/s are having conflicts with:
	git status
	// If you need help, see https://help.github.com/en/articles/resolving-a-merge-conflict-using-the-command-line
	git add .
	git push origin branch_name

Remove last commit from master branch
	git reset HEAD~ --hard

Revert to previous commit - don't include {}
	git revert {commit_id}

Revert to previous changes (can be used for individual files - don't include {}
	// Erase all local changes
	git reset --hard {commit_id}
	// Keep local changes
	git reset --soft {commit_id}

Check reference log
	git reflog

Delete a file from your local git repo
   git rm some_dir/file_name.txt

Rename a file in git repo
   git mv some_dir/first_file_name.txt some_dir/new_file_name.txt
